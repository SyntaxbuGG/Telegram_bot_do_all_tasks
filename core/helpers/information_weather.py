import aiohttp
import emoji
from core.helpers.constant import BACK_TO

weather_icons = {
    'Sunny': '‚òÄÔ∏è',
    'Clear': 'üåô',
    'Partly cloudy': '‚õÖ',
    'Cloudy': '‚òÅÔ∏è',
    "Patchy rain possible": "üå¶Ô∏è",
    'Overcast': '‚òÅÔ∏èÔ∏è',
    'Mist': 'üå´Ô∏è',
    'Patchy snow possible': 'üå®Ô∏è',
    "Light rain": 'üåß'}


async def get_weather(strana):
    url_get = f"https://api.weatherapi.com/v1/forecast.json?key=db82493ba5634651bb6111737230910&q={strana}&days=10&aqi=no&alerts=no"
    async with aiohttp.ClientSession() as session:
        async with session.get(url_get) as response:
            try:
                json_weather = await response.json()

                location = json_weather.get('location')
                current = json_weather.get('current')
                forecast = json_weather.get('forecast')['forecastday'][0]
                current_hour = forecast['hour']
                region = location['region']
                country = location['country']
                local_time_now = location['localtime']
                last_updated = current['last_updated']
                time_weather = local_time_now[-5:-3]
                temp_c = current['temp_c']
                condition = current['condition']['text']
                feels_like = current['feelslike_c']
                humidity = current['humidity']
                wind = current['wind_kph']
                wind_dir = current['wind_dir']
                visability = current['vis_km']
                max_tm = forecast['day']['maxtemp_c']
                min_tm = forecast['day']['mintemp_c']
                will_it_rain = forecast['day']['daily_will_it_rain']
                chance_of_rain = forecast['day']['daily_chance_of_rain']
                will_it_snow = forecast['day']['daily_will_it_snow']
                chance_of_snow = forecast['day']['daily_chance_of_snow']
                sunrise = forecast['astro']['sunrise']
                sunset = forecast['astro']['sunset']
                wd = weather_icons.get(condition, )
                will_it_rain_if = '–î–∞' if will_it_rain else '–ù–µ—Ç'
                will_it_snow_if = '–î–∞' if will_it_snow else '–ù–µ—Ç'
                tomorw_weath = await tomorrow_weather(json_weather)
                lists_hour = ""
                for i, x in enumerate(current_hour):
                    if int(time_weather) < i:
                        list_hour = f"{x['time'][-5:]} {weather_icons.get(x['condition']['text'], 'ü§î')} {x['temp_c']}¬∞C \n"
                        lists_hour += list_hour

                return (
                    f'''–ü–æ–≥–æ–¥–∞ –≤ {region} {emoji.emojize(f':{country}:')}
–õ–æ–∫–∞–ª—å–Ω–∞—è –≤—Ä–µ–º—è: {local_time_now}\n
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {last_updated}
<strong>–¢–ï–ö–£–©–ê–Ø –ü–û–ì–û–î–ê</strong> üå°
{wd} {temp_c}¬∞C
–û—â—É—â–µ–Ω–∏–µ –∫–∞–∫: {feels_like}¬∞C
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {max_tm}¬∞C
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {min_tm}¬∞C
–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%
–í–µ—Ç–µ—Ä: {wind_dir} {wind} km/h
–í–∏–¥–∏–º–æ—Å—Ç—å: {visability} km
–ë—É–¥–µ—Ç –ª–∏ –¥–æ–∂–¥—å: {will_it_rain_if}
–ë—É–¥–µ—Ç –ª–∏ —Å–Ω–µ–≥: {will_it_snow_if}
–í–æ—Å—Ö–æ–¥: {sunrise} üåá  –ó–∞–∫–∞—Ç: {sunset} üåÜ
{lists_hour}''', tomorw_weath)
            except Exception as err:
                print(f'{err}')
                return ('–ù–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏,\n'
                        f'–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏,–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>{BACK_TO}</strong>.\n'
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫ –Ω–∞–ø–∏—à–∏—Ç–µ')


#
async def tomorrow_weather(json_weath):
    ful_forecast = json_weath.get('forecast')['forecastday']
    lists = f"{ful_forecast[0]['date']}              {ful_forecast[1]['date']}              {ful_forecast[2]['date']}\n"


    for x, y, z in zip(ful_forecast[0]['hour'], ful_forecast[1]['hour'], ful_forecast[2]['hour']):

        list_hour = f"{x['time'][-5:]}{weather_icons.get(x['condition']['text'], 'ü§î')} {x['temp_c']}¬∞C"
        list_hour2 = f"{y['time'][-5:]}{weather_icons.get(y['condition']['text'], 'ü§î')} {y['temp_c']}¬∞C"
        list_hour3 = f"{z['time'][-5:]}{weather_icons.get(z['condition']['text'], 'ü§î')} {z['temp_c']}¬∞C"
        lists += f'{list_hour} <strong>||</strong> {list_hour2} <strong>||</strong> {list_hour3}\n'
    return lists
